@test compile

#import <cstdio>

pub int main() {
    printf("Hello, World!\n");
    return 0;
}

@test compile

#import <cstdio>
#import <cstdlib>

namespace testing {
    priv void test() {
        printf("Hello from Testing!\n");    
    }
}

pub int main() {
    testing::test();
    return 0;
}

@test check
@c "testfunction" not in h
@c "testfunction" in c

priv void testfunction() {
    
}

@test check
@c "testfunction" in h
@c "testfunction" in c

pub void testfunction() {

}

@test check
@c "testfunction" in h
@c "testfunction" in c

void testfunction() {

}

@test check
@c "testfunction" in h
@c "testfunction" not in c

pub void testfunction();

@test check
@c "testfunction" not in h
@c "testfunction" in c

priv void testfunction();

@test check
@c "testfunction" in h
@c "testfunction" not in c

void testfunction();

@test check
@c "Value: %d\\n" in h
@c "Value: %d\\n" not in c

#import <cstdio>

namespace testing {
    template<typename T>
    pub void printValue(T value) {
        printf("Value: %d\n", value);
    }
}

pub int main() {
    testing::printValue(42);
    return 0;
}