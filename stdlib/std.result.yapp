#import <memory>
#import std.str

struct pub base_result {
    virtual ~base_result() = default;
    virtual bool isOk() const = 0;
    virtual bool isErr() const = 0;
};

template<typename T = void>
struct pub ok_result : public base_result {
    T value;
    ok_result(const T& v) : value(v) {}
    bool isOk() const override { return true; }
    bool isErr() const override { return false; }
};

template<>
struct pub ok_result<void> : base_result {
    ok_result() {}
    bool isOk() const override { return true; }
    bool isErr() const override { return false; }
};

struct pub err_result : public base_result {
    str error;
    err_result(const str& err) : error(err) {}
    bool isOk() const override { return false; }
    bool isErr() const override { return true; }
};

template<typename T = void>
struct pub result {
    std::unique_ptr<ok_result<T>> ok_ptr = nullptr;
    std::unique_ptr<err_result> err_ptr = nullptr;

    result() = default;

    bool isOk() const { return ok_ptr != nullptr; }
    bool isErr() const { return err_ptr != nullptr; }

    T unwrap() const {
        if (!isOk()) throw std::runtime_error("Tried to unwrap error result: " + err_ptr->error);
        return ok_ptr->value;
    }

    str unwrapErr() const {
        if (!isErr()) throw std::runtime_error("Tried to unwrap error from Ok");
        return err_ptr->error;
    }
    
    // allow implicit conversion to T if ok
    operator T() const {
        return unwrap();
    }

    // we only want the above function if T = void
    operator bool() const {
        return isOk();
    }
};

template<>
struct pub result<void> {
    std::unique_ptr<ok_result<void>> ok_ptr = nullptr;
    std::unique_ptr<err_result> err_ptr = nullptr;

    result() = default;

    bool isOk() const { return ok_ptr != nullptr; }
    bool isErr() const { return err_ptr != nullptr; }

    void unwrap() const {
        if (!isOk()) throw std::runtime_error("Tried to unwrap error result: " + err_ptr->error);
    }

    str unwrapErr() const {
        if (!isErr()) throw std::runtime_error("Tried to unwrap error from Ok");
        return err_ptr->error;
    }

    template<typename U>
    operator result<U>() const {
        if (!isErr()) throw std::runtime_error("Attempted to convert normal result to error result");
        result<U> res;
        res.err_ptr = std::make_unique<err_result>(err_ptr->error);
        return res;
    }
    // we only want the above function if T = void
    operator bool() const {
        return isOk();
    }
};

namespace res {
    template<typename U>
    pub result<U> ok(const U& value) {
        result<U> res;
        res.ok_ptr = std::make_unique<ok_result<U>>(value);
        return res;
    }

    pub result<void> ok() {
        result<void> res;
        res.ok_ptr = std::make_unique<ok_result<void>>();
        return res;
    }

    pub result<void> err(const str& error) {
        result<void> res;
        res.err_ptr = std::make_unique<err_result>(error);
        return res;
    }
}